from aiogram import types
from database import Database
from keyboards import get_cities_keyboard, get_main_keyboard, get_streets_keyboard
from utils.logger import logger


async def handle_contacts(message: types.Message, db: Database):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ö–æ–Ω—Ç–∞–∫—Ç—ã"""
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    logger.info(f"User {username} (ID: {user_id}) requested contacts")

    cities = db.get_all_cities()
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:",
        reply_markup=get_cities_keyboard(cities)
    )


async def handle_city_selection(message: types.Message, db: Database):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞"""
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    city = message.text

    logger.info(f"User {username} (ID: {user_id}) selected city: {city}")

    cities = db.get_all_cities()
    if city in cities:
        city_id = cities.index(city) + 1
        streets = db.get_streets_by_city(city_id)
        if streets:
            logger.info(f"Found {len(streets)} streets for city {city}")
            await message.answer(
                f"–í—ã–±–µ—Ä–∏—Ç–µ —É–ª–∏—Ü—É –≤ –≥–æ—Ä–æ–¥–µ {city}:",
                reply_markup=get_streets_keyboard(streets)
            )
        else:
            logger.warning(f"No streets found for city {city}")
            await message.answer(
                f"–í –≥–æ—Ä–æ–¥–µ {city} –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–ª–∏—Ü.",
                reply_markup=get_cities_keyboard(cities)
            )


async def handle_street_selection(message: types.Message, db: Database):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É–ª–∏—Ü—ã"""
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    street = message.text

    logger.info(f"User {username} (ID: {user_id}) selected street: {street}")

    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    db.debug_street_info(street)

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ—á–∫–∞—Ö –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —É–ª–∏—Ü–µ
    items = db.get_items_by_address(street)

    if items:
        logger.info(f"Found {len(items)} items for street {street}")
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞–∂–¥–æ–π —Ç–æ—á–∫–µ
        for item in items:
            name, address, weekdays_time, weekend_time, contact, geo_link = item[1:7]
            text = (
                f"üìç {name}\n"
                f"üè† –ê–¥—Ä–µ—Å: {address}\n"
                f"üïê –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:\n"
                f"   –ë—É–¥–Ω–∏: {weekdays_time}\n"
                f"   –í—ã—Ö–æ–¥–Ω—ã–µ: {weekend_time}\n"
                f"üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: {contact}\n"
                f"üìç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è: {geo_link}"
            )
            await message.answer(text)
    else:
        logger.warning(f"No items found for street {street}")
        await message.answer("–ü–æ –¥–∞–Ω–Ω–æ–º—É –∞–¥—Ä–µ—Å—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")


async def handle_back(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥"""
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    logger.info(f"User {username} (ID: {user_id}) returned to main menu")

    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=get_main_keyboard()
    )


async def handle_back_to_cities(message: types.Message, db: Database):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥ –∫ –≥–æ—Ä–æ–¥–∞–º"""
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    logger.info(f"User {username} (ID: {user_id}) returned to cities list")

    await handle_contacts(message, db)
