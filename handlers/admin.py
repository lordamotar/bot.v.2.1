from aiogram import types, Bot
from database import Database
from keyboards import (
    get_main_keyboard, 
    get_admin_keyboard,
    get_pending_chats_keyboard,
    get_active_chats_keyboard,
    get_managers_list_keyboard,
    get_extended_chat_keyboard
)
import logging
from utils.analytics import AnalyticsReporter
from datetime import datetime, timedelta

logger = logging.getLogger(__name__)

async def handle_admin_panel(message: types.Message, db: Database):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not db.is_admin(user_id):
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            reply_markup=get_main_keyboard()
        )
        return
    
    await message.answer(
        "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_keyboard()
    )

async def handle_admin_stats(message: types.Message, db: Database):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not db.is_admin(user_id):
        return
    
    stats = db.get_dashboard_stats()
    
    await message.answer(
        f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:*\n\n"
        f"üë®‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä—ã: {stats['total_managers']}\n"
        f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: {stats['available_managers']}\n"
        f"‚è≥ –û–∂–∏–¥–∞—é—â–∏—Ö —á–∞—Ç–æ–≤: {stats['pending_chats']}\n"
        f"üí¨ –ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: {stats['active_chats']}\n",
        parse_mode="Markdown",
        reply_markup=get_admin_keyboard()
    )

async def handle_admin_pending_chats(message: types.Message, db: Database):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–∂–∏–¥–∞—é—â–∏—Ö —á–∞—Ç–æ–≤"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not db.is_admin(user_id):
        return
    
    pending_chats = db.get_pending_chats()
    
    if not pending_chats:
        await message.answer(
            "–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö —á–∞—Ç–æ–≤",
            reply_markup=get_admin_keyboard()
        )
        return
    
    await message.answer(
        f"–ù–∞–π–¥–µ–Ω–æ {len(pending_chats)} –æ–∂–∏–¥–∞—é—â–∏—Ö —á–∞—Ç–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è:",
        reply_markup=get_pending_chats_keyboard(pending_chats)
    )

async def handle_admin_active_chats(message: types.Message, db: Database):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not db.is_admin(user_id):
        return
    
    active_chats = db.get_all_active_chats()
    
    if not active_chats:
        await message.answer(
            "–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤",
            reply_markup=get_admin_keyboard()
        )
        return
    
    formatted_chats = []
    
    for chat in active_chats:
        client_id, username, client_name, client_phone, manager_id = chat
        manager_name = db.get_manager_name(manager_id) or f"ID: {manager_id}"
        
        formatted_chats.append((
            client_id, 
            username, 
            f"{client_name or username} (–ú–µ–Ω–µ–¥–∂–µ—Ä: {manager_name})", 
            client_phone
        ))
    
    await message.answer(
        f"–ù–∞–π–¥–µ–Ω–æ {len(active_chats)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤:",
        reply_markup=get_active_chats_keyboard(formatted_chats)
    )

async def handle_admin_managers(message: types.Message, db: Database):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not db.is_admin(user_id):
        return
    
    managers = db.get_all_managers()
    
    if not managers:
        await message.answer(
            "–í —Å–∏—Å—Ç–µ–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤",
            reply_markup=get_admin_keyboard()
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    keyboard = []
    
    for manager in managers:
        manager_id, name, is_admin, is_available, active_chats = manager
        manager_name = name or f"ID: {manager_id}"
        status = "üü¢ " if is_available else "üî¥ "
        admin_badge = "üëë " if is_admin else ""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
        keyboard.append([types.KeyboardButton(text=f"{admin_badge}{status}{manager_name} ({manager_id})")])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        keyboard.append([types.KeyboardButton(text=f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {manager_name} ({manager_id})")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.append([types.KeyboardButton(text="–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")])
    
    await message.answer(
        f"–ù–∞–π–¥–µ–Ω–æ {len(managers)} –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤:",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=keyboard,
            resize_keyboard=True
        )
    )

async def handle_admin_take_chat(message: types.Message, bot: Bot, db: Database):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    user_id = message.from_user.id
    admin_name = message.from_user.first_name or "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not db.is_admin(user_id):
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
    text = message.text
    if not text.startswith("–í–∑—è—Ç—å —á–∞—Ç —Å "):
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã",
            reply_markup=get_admin_keyboard()
        )
        return
    
    client_info = text.replace("–í–∑—è—Ç—å —á–∞—Ç —Å ", "")
    
    # –ò—â–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –∏–º–µ–Ω–∏ –∏ —Ç–µ–ª–µ—Ñ–æ–Ω—É
    pending_chats = db.get_pending_chats()
    target_client_id = None
    
    for chat in pending_chats:
        client_id, username, client_name, client_phone, _ = chat
        display_name = client_name if client_name else username
        display_text = f"{display_name}"
        if client_phone:
            display_text += f" ({client_phone})"
        
        if display_text == client_info:
            target_client_id = client_id
            break
    
    if not target_client_id:
        await message.answer(
            "–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —á–∞—Ç —É–∂–µ –±—ã–ª –ø—Ä–∏–Ω—è—Ç –¥—Ä—É–≥–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º",
            reply_markup=get_admin_keyboard()
        )
        return
    
    # –ü—Ä–∏–Ω–∏–º–∞–µ–º —á–∞—Ç
    if db.activate_chat(target_client_id, user_id):
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        db.increment_manager_active_chats(user_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        db.update_manager_activity(user_id)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await bot.send_message(
            target_client_id,
            "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ —á–∞—Ç—É. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–∞—à –≤–æ–ø—Ä–æ—Å."
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        greeting_message = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú–µ–Ω—è –∑–æ–≤—É—Ç {admin_name}, —è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –ß–µ–º –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?"
        await bot.send_message(
            target_client_id,
            greeting_message
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏
        db.save_message(target_client_id, user_id, greeting_message, 'text')
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await message.answer(
            "–í—ã –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ —á–∞—Ç—É —Å –∫–ª–∏–µ–Ω—Ç–æ–º.",
            reply_markup=get_extended_chat_keyboard()
        )
    else:
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —á–∞—Ç—É",
            reply_markup=get_admin_keyboard()
        )

async def handle_admin_manager_stats(message: types.Message, db: Database, config):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not db.is_admin(user_id):
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
    text = message.text
    if not text.startswith("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: "):
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã",
            reply_markup=get_admin_keyboard()
        )
        return
    
    manager_info = text.replace("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ", "")
    manager_id = int(manager_info.split("(")[1].split(")")[0])
    
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–∑ –ë–î
    manager_stats = db.get_manager_stats(manager_id)
    if not manager_stats:
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —ç—Ç–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞",
            reply_markup=get_admin_keyboard()
        )
        return
    
    active_chats, total_chats, rating = manager_stats
    manager_name = db.get_manager_name(manager_id) or f"–ú–µ–Ω–µ–¥–∂–µ—Ä {manager_id}"
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    # –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    week_report = AnalyticsReporter.get_manager_performance_report(
        config.db.database, manager_id=manager_id, days=7
    )
    
    # –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
    month_report = AnalyticsReporter.get_manager_performance_report(
        config.db.database, manager_id=manager_id, days=30
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç –æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∏–∫–∞
    response_report = AnalyticsReporter.get_response_time_report(days=30)
    response_stats = None
    
    # –ò—â–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤ –æ—Ç—á–µ—Ç–µ –æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∏–∫–∞
    for manager_report in response_report:
        if str(manager_report['manager_id']) == str(manager_id):
            response_stats = manager_report
            break
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    stats_text = f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {manager_name}*\n\n"
    
    # –¢–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    stats_text += "*–¢–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:*\n"
    stats_text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: {active_chats}\n"
    stats_text += f"‚Ä¢ –í—Å–µ–≥–æ —á–∞—Ç–æ–≤: {total_chats}\n"
    stats_text += f"‚Ä¢ –†–µ–π—Ç–∏–Ω–≥: {rating:.1f}/5.0\n\n"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é
    if week_report:
        wr = week_report[0]
        stats_text += "*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 7 –¥–Ω–µ–π:*\n"
        stats_text += f"‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —á–∞—Ç–æ–≤: {wr['total_chats']}\n"
        stats_text += f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {wr['avg_rating']}/5.0 ({wr['rating_count']} –æ—Ü–µ–Ω–æ–∫)\n"
        stats_text += f"‚Ä¢ –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫ (4-5): {wr['positive_ratings']}\n"
        stats_text += f"‚Ä¢ –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫ (1-2): {wr['negative_ratings']}\n\n"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü
    if month_report:
        mr = month_report[0]
        stats_text += "*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 30 –¥–Ω–µ–π:*\n"
        stats_text += f"‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —á–∞—Ç–æ–≤: {mr['total_chats']}\n"
        stats_text += f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {mr['avg_rating']}/5.0 ({mr['rating_count']} –æ—Ü–µ–Ω–æ–∫)\n"
        stats_text += f"‚Ä¢ –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫ (4-5): {mr['positive_ratings']}\n"
        stats_text += f"‚Ä¢ –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫ (1-2): {mr['negative_ratings']}\n\n"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∏–∫–∞
    if response_stats:
        stats_text += "*–í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞:*\n"
        stats_text += f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {response_stats['avg_response_time']} —Å–µ–∫\n"
        stats_text += f"‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {response_stats['min_response_time']} —Å–µ–∫\n"
        stats_text += f"‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {response_stats['max_response_time']} —Å–µ–∫\n"
        stats_text += f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤: {response_stats['response_count']}\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç" –¥–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text=f"–û—Ç—á–µ—Ç: {manager_name} ({manager_id})")],
            [types.KeyboardButton(text="–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")]
        ],
        resize_keyboard=True
    )
    
    await message.answer(
        stats_text,
        parse_mode="Markdown",
        reply_markup=keyboard
    ) 