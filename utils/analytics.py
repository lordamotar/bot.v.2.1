import asyncio
from datetime import datetime, timedelta
import json
from aiogram import Bot, types
from .logger import (
    AnalyticsReporter, 
    logger, 
    ManagerMetrics, 
    BotMonitoring
)
from database import Database


class ManagerAnalytics:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π —Ä–∞–±–æ—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"""
    
    def __init__(self, db: Database, bot: Bot, config):
        self.db = db
        self.bot = bot
        self.config = config
        self.report_chat_id = config.config.admin_manager_id

    async def generate_daily_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ —Ä–∞–±–æ—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç –æ —Ä–∞–±–æ—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            manager_report = AnalyticsReporter.get_manager_performance_report(
                self.config.db.database, days=1
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç –æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∏–∫–∞
            response_report = AnalyticsReporter.get_response_time_report(days=1)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞
            report_text = "üìä *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Ä–∞–±–æ—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤*\n\n"
            
            if manager_report:
                report_text += "*–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤:*\n"
                for manager in manager_report:
                    report_text += (
                        f"üë®‚Äçüíº {manager['manager_name']} (ID: {manager['manager_id']})\n"
                        f"   - –ß–∞—Ç–æ–≤: {manager['total_chats']}\n"
                        f"   - –†–µ–π—Ç–∏–Ω–≥: {manager['avg_rating']}/5.0 ({manager['rating_count']} –æ—Ü–µ–Ω–æ–∫)\n"
                        f"   - üëç –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö: {manager['positive_ratings']}\n"
                        f"   - üëé –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö: {manager['negative_ratings']}\n\n"
                    )
            else:
                report_text += "*–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—é –∫–ª–∏–µ–Ω—Ç–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è*\n\n"
            
            if response_report:
                report_text += "*–í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞:*\n"
                for manager in response_report:
                    manager_name = self.db.get_manager_name(manager['manager_id']) or f"–ú–µ–Ω–µ–¥–∂–µ—Ä {manager['manager_id']}"
                    report_text += (
                        f"üë®‚Äçüíº {manager_name} (ID: {manager['manager_id']})\n"
                        f"   - –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {manager['avg_response_time']} —Å–µ–∫\n"
                        f"   - –ú–∏–Ω. –≤—Ä–µ–º—è: {manager['min_response_time']} —Å–µ–∫\n"
                        f"   - –ú–∞–∫—Å. –≤—Ä–µ–º—è: {manager['max_response_time']} —Å–µ–∫\n"
                        f"   - –í—Å–µ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤: {manager['response_count']}\n\n"
                    )
            else:
                report_text += "*–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è*\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = self.db.get_dashboard_stats()
            report_text += (
                "*–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
                f"üë• –í—Å–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: {stats['total_managers']}\n"
                f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: {stats['available_managers']}\n"
                f"‚è≥ –û–∂–∏–¥–∞—é—â–∏—Ö —á–∞—Ç–æ–≤: {stats['pending_chats']}\n"
                f"üí¨ –ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: {stats['active_chats']}\n"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            if self.report_chat_id:
                await self.bot.send_message(
                    self.report_chat_id,
                    report_text,
                    parse_mode="Markdown"
                )
                logger.info(f"Daily report sent to admin (ID: {self.report_chat_id})")
            else:
                logger.warning("No admin ID configured to send daily report")
        
        except Exception as e:
            logger.error(f"Error generating daily report: {e}")

    async def start_scheduler(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤"""
        while True:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
                now = datetime.now()
                
                # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞ (9:00 —É—Ç—Ä–∞)
                target_time = now.replace(hour=9, minute=0, second=0, microsecond=0)
                if now >= target_time:
                    target_time += timedelta(days=1)
                
                # –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –Ω—É–∂–Ω–æ –∂–¥–∞—Ç—å
                seconds_to_wait = (target_time - now).total_seconds()
                
                # –ñ–¥–µ–º –¥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç—á–µ—Ç–∞
                logger.info(f"Scheduled next daily report in {seconds_to_wait/3600:.2f} hours")
                await asyncio.sleep(seconds_to_wait)
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
                await self.generate_daily_report()
            
            except Exception as e:
                logger.error(f"Error in report scheduler: {e}")
                await asyncio.sleep(3600)  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∂–¥–µ–º 1 —á–∞—Å

    async def send_manager_report(self, manager_id: int, chat_id: int, days: int = 7):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –æ —Ä–∞–±–æ—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç –æ —Ä–∞–±–æ—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            manager_report = AnalyticsReporter.get_manager_performance_report(
                self.config.db.database, manager_id=manager_id, days=days
            )
            
            if not manager_report:
                await self.bot.send_message(
                    chat_id,
                    "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥."
                )
                return
            
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π (–∏ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π) —ç–ª–µ–º–µ–Ω—Ç –æ—Ç—á–µ—Ç–∞
            report = manager_report[0]
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞
            report_text = (
                f"üìä *–û—Ç—á–µ—Ç –æ —Ä–∞–±–æ—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ {report['manager_name']}*\n"
                f"*–ü–µ—Ä–∏–æ–¥:* {report['period']}\n\n"
                f"*–í—Å–µ–≥–æ —á–∞—Ç–æ–≤:* {report['total_chats']}\n"
                f"*–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥:* {report['avg_rating']}/5.0 ({report['rating_count']} –æ—Ü–µ–Ω–æ–∫)\n"
                f"*–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫ (4-5):* {report['positive_ratings']}\n"
                f"*–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫ (1-2):* {report['negative_ratings']}\n"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
            await self.bot.send_message(
                chat_id,
                report_text,
                parse_mode="Markdown"
            )
        
        except Exception as e:
            logger.error(f"Error sending manager report: {e}")
            await self.bot.send_message(
                chat_id,
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞."
            )


class BotAnalytics:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    
    def __init__(self, db: Database, bot: Bot, config):
        self.db = db
        self.bot = bot
        self.config = config
        self.admin_id = config.config.admin_manager_id
    
    async def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞"""
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
        BotMonitoring.log_bot_start()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
        asyncio.create_task(self._monitor_bot_health())
    
    async def _monitor_bot_health(self):
        """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞"""
        while True:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
                await asyncio.sleep(15 * 60)
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                stats = self.db.get_dashboard_stats()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
                critical_issues = []
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –ú–µ–Ω–µ–µ 1 –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –æ–∂–∏–¥–∞—é—â–∏—Ö —á–∞—Ç–æ–≤
                if stats['available_managers'] < 1 and stats['pending_chats'] > 0:
                    critical_issues.append(
                        f"‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤, –Ω–æ –µ—Å—Ç—å {stats['pending_chats']} –æ–∂–∏–¥–∞—é—â–∏—Ö —á–∞—Ç–æ–≤!"
                    )
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –ë–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∂–∏–¥–∞—é—â–∏—Ö —á–∞—Ç–æ–≤ (–±–æ–ª–µ–µ 5)
                if stats['pending_chats'] >= 5:
                    critical_issues.append(
                        f"‚ö†Ô∏è –ë–æ–ª—å—à–∞—è –æ—á–µ—Ä–µ–¥—å —á–∞—Ç–æ–≤: {stats['pending_chats']} –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–±—Ä–∞–±–æ—Ç–∫–∏!"
                    )
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                if critical_issues and self.admin_id:
                    alert_text = "üö® *–í–ù–ò–ú–ê–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞*\n\n"
                    alert_text += "\n".join(critical_issues)
                    alert_text += "\n\n*–¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
                    alert_text += (
                        f"üë• –í—Å–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: {stats['total_managers']}\n"
                        f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: {stats['available_managers']}\n"
                        f"‚è≥ –û–∂–∏–¥–∞—é—â–∏—Ö —á–∞—Ç–æ–≤: {stats['pending_chats']}\n"
                        f"üí¨ –ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: {stats['active_chats']}\n"
                    )
                    
                    await self.bot.send_message(
                        self.admin_id,
                        alert_text,
                        parse_mode="Markdown"
                    )
                    
                    logger.warning(
                        f"Bot health alert sent to admin. Issues: {', '.join(critical_issues)}"
                    )
            
            except Exception as e:
                logger.error(f"Error in bot health monitoring: {e}")
                await asyncio.sleep(60)  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∂–¥–µ–º 1 –º–∏–Ω—É—Ç—É
    
    def log_bot_stop(self):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫—É –±–æ—Ç–∞"""
        BotMonitoring.log_bot_stop() 